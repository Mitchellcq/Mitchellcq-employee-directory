{"version":3,"sources":["components/EmployeeContext.js","components/Search.js","components/Navbar.js","hooks/API.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["EmployeeContext","createContext","Search","useState","search","setSearch","useContext","employees","setDisplayedEmployees","type","onChange","searchTerm","target","value","filterResult","filter","employee","name","first","toLowerCase","indexOf","Navbar","className","useGet","url","setEmployees","displayedEmployees","useEffect","a","axios","get","response","data","results","console","log","getEmployees","sortFunc","sort","b","last","login","username","gender","email","dob","age","Table","class","onClick","Button","map","alt","src","picture","medium","uuid","App","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6fcf0c74.chunk.js","sourcesContent":["import {createContext} from 'react'\n\nexport const EmployeeContext = createContext(null);","import React, { useState, useContext } from 'react';\nimport { EmployeeContext } from './EmployeeContext.js';\n\n\nfunction Search() {\n    // stores the characters being entered into the search input\n    const [search, setSearch] = useState(\"\")\n    const { employees, setDisplayedEmployees } = useContext(EmployeeContext)\n\n    function updateSearch({ target }) {\n        // just using for readability\n        const searchTerm = target.value\n        // used for updating the value in the search input, so it always equals exactly what is saved in state\n        setSearch(searchTerm)\n        // filters the employees based on the text that is entered in the search input\n        const filterResult = employees.filter(function (employee) {\n            // Looks at every employee first name, makes the name lowercase, \n            // ... if first name contains the current search, display \n            // ... if not it is removed from the list.\n            return employee.name.first.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1 ? true : false\n        })\n        setDisplayedEmployees([...filterResult])\n    }\n    // every letter entered triggers the onChange event.\n    return (\n        <input type=\"text\" onChange={updateSearch} value={search}></input>\n    )\n}\nexport default Search;","import React from 'react';\nimport Search from \"./Search.js\"\nimport \"./Navbar.css\"\n\nfunction Navbar(){\n    // used as the navbar for the site.\n    return(\n        <div className=\"navbar\">\n            <div className=\"logo bold\">Employee Directory</div>\n            <div className=\"descriptor\">\n                <div className=\"bold\">Employee Search: </div>\n                <Search />\n            </div>\n        </div>\n    )\n}\nexport default Navbar;","import { useEffect, useContext } from 'react';\nimport { EmployeeContext } from \"../components/EmployeeContext\"\nimport axios from \"axios\"\n\nexport function useGet(url) {\n    const { employees, setEmployees, displayedEmployees, setDisplayedEmployees } = useContext(EmployeeContext)\n\n    // gets employees from an api, stores them in both employees, and displayed employees. Only occurs once when component is mounted.\n    useEffect(() => {\n        async function getEmployees() {\n            try {\n                const response = await axios.get(url)\n                // using employees to store a copy of all the employees that will not be manipulated\n                setEmployees(response.data.results)\n                // using displayed employees to be a manipulated version of the employees that will be displayed for sorting and filtering.\n                setDisplayedEmployees(response.data.results)\n            }\n            catch (error) {\n                console.log(\"error ocurred getting info from the API: \", error)\n            }\n        }\n        getEmployees()\n    }, [])\n\n    // used to decide which sort function to trigger\n    function sortFunc(sort) {\n        switch (sort) {\n            case \"firstName\":\n                sortByFirstName()\n                break\n            case \"lastName\":\n                sortByLastName()\n                break\n            case \"userName\":\n                sortByUserName()\n                break\n            case \"gender\":\n                sortByGender()\n                break\n            case \"email\":\n                sortByEmail()\n                break\n            case \"age\":\n                sortByAge()\n                break\n            default:\n                console.log(\"sort does not match any cases\")\n        }\n    }\n\n    // sorts the employees based on first name.\n    function sortByFirstName() {\n        employees.sort(function (a, b) {\n            if (a.name.first < b.name.first) {\n                return -1;\n            } else {\n                return 1;\n            }\n        })\n        setDisplayedEmployees([...employees])\n    }\n\n    // sorts the employees based on last name.\n    function sortByLastName() {\n        employees.sort(function (a, b) {\n            if (a.name.last < b.name.last) {\n                return -1;\n            } else {\n                return 1;\n            }\n        })\n        setDisplayedEmployees([...employees])\n    }\n    //username\n    function sortByUserName() {\n        employees.sort(function (a, b) {\n            if (a.login.username < b.login.username) {\n                return -1;\n            } else {\n                return 1;\n            }\n        })\n        setDisplayedEmployees([...employees])\n    }\n    //gender\n    function sortByGender() {\n        employees.sort(function (a, b) {\n            if (a.gender < b.gender) {\n                return -1;\n            } else {\n                return 1;\n            }\n        })\n        setDisplayedEmployees([...employees])\n    }\n    //email\n    function sortByEmail() {\n        employees.sort(function (a, b) {\n            if (a.email < b.email) {\n                return -1;\n            } else {\n                return 1;\n            }\n        })\n        setDisplayedEmployees([...employees])\n    }\n    //age\n    function sortByAge() {\n        employees.sort(function (a, b) {\n            return (a.dob.age - b.dob.age)\n        })\n        setDisplayedEmployees([...employees])\n    }\n\n    return { displayedEmployees, sortFunc }\n}\n","import React, { useState, useContext } from 'react';\nimport { useGet } from \"../hooks/API.js\"\nimport \"./Table.css\"\nimport { EmployeeContext } from './EmployeeContext.js';\nimport Button from 'react-bootstrap/Button';\n\nfunction Table() {\n\n    const [url] = useState(\"https://randomuser.me/api/?results=10\")\n    // custom hook used for getting the employees from the api and storing the sort functions\n    const { sortFunc } = useGet(url);\n    // contains the employees to display in the table\n    const { displayedEmployees } = useContext(EmployeeContext)\n\n    return (\n\n        <div class=\"row d-flex justify-content-center\">\n            <div class=\"col-8\">\n                <table>\n                    <thead>\n                        <tr>\n                            <td onClick={() => sortFunc(\"firstName\")}><Button>First Name</Button></td>\n                            <td onClick={() => sortFunc(\"lastName\")}><Button>Last Name</Button></td>\n                            <td onClick={() => sortFunc(\"userName\")}><Button>Username</Button></td>\n                            <td onClick={() => sortFunc(\"gender\")}><Button>Gender</Button></td>\n                            <td onClick={() => sortFunc(\"email\")}><Button>Email</Button></td>\n                            <td onClick={() => sortFunc(\"age\")}><Button>Age</Button></td>\n                            <td>Picture</td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {displayedEmployees.map(employee => {\n                            return (\n                                <tr key={employee.login.uuid}>\n                                    <td>{employee.name.first}</td>\n                                    <td>{employee.name.last}</td>\n                                    <td>{employee.login.username}</td>\n                                    <td>{employee.gender}</td>\n                                    <td>{employee.email}</td>\n                                    <td>{employee.dob.age}</td>\n                                    <td><img alt=\"user\" src={employee.picture.medium} /></td>\n                                </tr>\n                            )\n                        }\n                        )}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    )\n}\nexport default Table;","import React, { useState } from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar\"\nimport Table from \"./components/Table\"\nimport { EmployeeContext } from \"./components/EmployeeContext\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  const [employees, setEmployees] = useState([]);\n  const [displayedEmployees, setDisplayedEmployees] = useState([])\n\n  return (\n\n    <div className=\"App\">\n      <EmployeeContext.Provider value={{ employees, setEmployees, displayedEmployees, setDisplayedEmployees }}>\n        <Navbar />\n        <Table />\n      </EmployeeContext.Provider>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}